server {
    listen 80;
    server_name dltelegram.com;

    # Allow ACME HTTP-01 challenge (if you use webroot)
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect everything else to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name dltelegram.com;

    ssl_certificate /etc/letsencrypt/live/dltelegram.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dltelegram.com/privkey.pem;

    # NOTE: Your app (Express) handles the webhook at /api/bot/webhook
    # and is mounted under /api/bot in backend/server.js.
    # The telegram-bot-api service on :8081 is used by the app to call
    # Telegram methods; it does NOT accept webhook posts for your bot logic.
    # Therefore, proxy the webhook path to the Node app on :8000.
    location /api/bot/webhook {
        proxy_pass http://127.0.0.1:8000/api/bot/webhook;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_read_timeout 60s;
    }

    # General API to Node app
    location /api/ {
        proxy_pass http://127.0.0.1:8000/api/;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Allow long-running downloads
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        send_timeout 600s;
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Serve downloaded files via Node's /bot static path
    # The bot falls back to sending a public URL like https://dltelegram.com/bot/<file>
    # when direct upload fails or for large files. Ensure this path proxies to Node.
    location /bot/ {
        proxy_pass http://127.0.0.1:8000/bot/;
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        send_timeout 600s;
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Socket.IO (WebSocket)
    location /socket.io/ {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_pass http://127.0.0.1:8000/socket.io/;
    }

    # Optional: if you serve the built frontend from Nginx
    root /var/www/teledown;
    index index.html;
    location / {
        try_files $uri /index.html;
    }
}
